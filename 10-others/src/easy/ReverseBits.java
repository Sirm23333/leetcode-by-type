package easy;

/**
 *颠倒二进制位
 * 颠倒给定的 32 位无符号整数的二进制位。
 *
 *  
 *
 * 示例 1：
 *
 * 输入: 00000010100101000001111010011100
 * 输出: 00111001011110000010100101000000
 * 解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
 *      因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。
 * 示例 2：
 *
 * 输入：11111111111111111111111111111101
 * 输出：10111111111111111111111111111111
 * 解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
 *      因此返回 3221225471 其二进制表示形式为 10111111111111111111111111111111 。
 *
 * 作者：力扣 (LeetCode)
 * 链接：https://leetcode-cn.com/leetbook/read/top-interview-questions-easy/xnc5vg/
 * 来源：力扣（LeetCode）
 * 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
 */
public class ReverseBits {
    public int reverseBits(int n) {
        int rs = 0;
        for(int i = 0; i < 32; i++){
            rs <<= 1;
            rs += (n & 1);
            n >>>= 1;
        }
        return rs;
    }

    public int reverseBits2(int n) {
        int pos = 0;
        int rs = 0;
        while(n != 0){
            if((n & 1) == 1){
                rs |= (1 << (31 - pos));
            }
            n >>>= 1;
            pos++;
        }
        return rs;
    }
    public int reverseBits3(int n) {
        n = ( n >>> 16 ) | ( n << 16);
        n = ( (n & 0xff00ff00) >>> 8 ) | ( (n & 0x00ff00ff) << 8 );
        n = ( (n & 0xf0f0f0f0) >>> 4 ) | ( (n & 0x0f0f0f0f) << 4 );
        n = ( (n & 0xcccccccc) >>> 2 ) | ( (n & 0x33333333) << 2 );
        n = ( (n & 0xaaaaaaaa) >>> 1 ) | ( (n & 0x55555555) << 1 );
        return n;
    }

}
